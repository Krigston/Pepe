#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/version-bump.js [patch|minor|major]
 */

// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const versionType = process.argv[2] || 'patch';

if (!['patch', 'minor', 'major'].includes(versionType)) {
    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: patch, minor –∏–ª–∏ major');
    process.exit(1);
}

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const packageJsonPath = path.join(__dirname, '..', 'package.json');
const versionManagerPath = path.join(__dirname, '..', 'src', 'VersionManager.ts');

try {
    // –ß–∏—Ç–∞–µ–º package.json
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const currentVersion = packageJson.version;
    const [major, minor, patch] = currentVersion.split('.').map(Number);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    let newVersion;
    switch (versionType) {
        case 'major':
            newVersion = `${major + 1}.0.0`;
            break;
        case 'minor':
            newVersion = `${major}.${minor + 1}.0`;
            break;
        case 'patch':
        default:
            newVersion = `${major}.${minor}.${patch + 1}`;
            break;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º package.json
    packageJson.version = newVersion;
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º VersionManager.ts
    let versionManagerContent = fs.readFileSync(versionManagerPath, 'utf8');
    const versionRegex = /public static readonly CURRENT_VERSION = '[^']+';/;
    const newVersionLine = `public static readonly CURRENT_VERSION = '${newVersion}';`;
    
    if (versionRegex.test(versionManagerContent)) {
        versionManagerContent = versionManagerContent.replace(versionRegex, newVersionLine);
    } else {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ CURRENT_VERSION –≤ VersionManager.ts');
        process.exit(1);
    }
    
    fs.writeFileSync(versionManagerPath, versionManagerContent);
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${currentVersion} ‚Üí ${newVersion}`);
    console.log(`üìù –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${versionType}`);
    console.log(`üì¶ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã:`);
    console.log(`   - package.json`);
    console.log(`   - src/VersionManager.ts`);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –≤–µ—Ä—Å–∏–π
    if (versionType === 'major') {
        console.log('üî• MAJOR: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏');
    } else if (versionType === 'minor') {
        console.log('‚ú® MINOR: –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ');
    } else {
        console.log('üêõ PATCH: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤, –æ–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ');
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏:', error.message);
    process.exit(1);
}
