import { MobileUtils } from './MobileUtils';

export interface TouchButton {
    id: string;
    element: HTMLElement;
    x: number;
    y: number;
    width: number;
    height: number;
    isPressed: boolean;
    action: string;
}

export class MobileControls {
    private container: HTMLElement;
    private buttons: Map<string, TouchButton> = new Map();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    private virtualKeys: { [key: string]: boolean } = {};
    
    constructor() {
        this.container = this.createControlsContainer();
        this.setupButtons();
        this.setupEventListeners();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        if (MobileUtils.isMobileDevice()) {
            this.show();
        }
    }
    
    private createControlsContainer(): HTMLElement {
        const container = document.createElement('div');
        container.id = 'mobileControls';
        container.className = 'mobile-controls';
        document.body.appendChild(container);
        return container;
    }
    
    private setupButtons(): void {
        // –õ–µ–≤—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ (–¥–≤–∏–∂–µ–Ω–∏–µ)
        this.createDirectionalPad();
        
        // –ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä—ã–∂–æ–∫ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ)
        this.createActionButtons();
    }
    
    private createDirectionalPad(): void {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è directional pad
        const dpadContainer = document.createElement('div');
        dpadContainer.className = 'dpad-container';
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        const directions = [
            { id: 'left', class: 'dpad-left', action: 'ArrowLeft', text: '‚Üê' },
            { id: 'right', class: 'dpad-right', action: 'ArrowRight', text: '‚Üí' },
            { id: 'up', class: 'dpad-up', action: 'ArrowUp', text: '‚Üë' }
        ];
        
        directions.forEach(dir => {
            const button = this.createButton(dir.id, dir.class, dir.text, dir.action);
            dpadContainer.appendChild(button.element);
            this.buttons.set(dir.id, button);
        });
        
        this.container.appendChild(dpadContainer);
    }
    
    private createActionButtons(): void {
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        const actionsContainer = document.createElement('div');
        actionsContainer.className = 'actions-container';
        
        // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        const actions = [
            { id: 'jump', class: 'action-jump', action: 'Space', text: 'ü¶ò' },
            { id: 'interact', class: 'action-interact', action: 'KeyE', text: 'E' }
        ];
        
        actions.forEach(action => {
            const button = this.createButton(action.id, action.class, action.text, action.action);
            actionsContainer.appendChild(button.element);
            this.buttons.set(action.id, button);
        });
        
        this.container.appendChild(actionsContainer);
    }
    
    private createButton(id: string, className: string, text: string, action: string): TouchButton {
        const element = document.createElement('div');
        element.id = `mobile-${id}`;
        element.className = `mobile-button ${className}`;
        element.textContent = text;
        element.style.userSelect = 'none';
        element.style.webkitUserSelect = 'none';
        
        const button: TouchButton = {
            id,
            element,
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            isPressed: false,
            action
        };
        
        return button;
    }
    
    private setupEventListeners(): void {
        this.buttons.forEach((button) => {
            // Touch events
            button.element.addEventListener('touchstart', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, true);
            }, { passive: false });
            
            button.element.addEventListener('touchend', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, false);
            }, { passive: false });
            
            button.element.addEventListener('touchcancel', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, false);
            }, { passive: false });
            
            // Mouse events –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
            button.element.addEventListener('mousedown', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, true);
            });
            
            button.element.addEventListener('mouseup', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, false);
            });
            
            button.element.addEventListener('mouseleave', (e) => {
                e.preventDefault();
                this.handleButtonPress(button, false);
            });
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ touch —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        this.container.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.updateLayout();
        });
    }
    
    private handleButtonPress(button: TouchButton, isPressed: boolean): void {
        button.isPressed = isPressed;
        this.virtualKeys[button.action] = isPressed;
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if (isPressed) {
            button.element.classList.add('pressed');
        } else {
            button.element.classList.remove('pressed');
        }
        
        console.log(`Mobile button ${button.id} ${isPressed ? 'pressed' : 'released'}: ${button.action}`);
    }
    
    private updateLayout(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
        this.updateButtonPositions();
    }
    
    private updateButtonPositions(): void {
        this.buttons.forEach((button) => {
            const rect = button.element.getBoundingClientRect();
            button.x = rect.left;
            button.y = rect.top;
            button.width = rect.width;
            button.height = rect.height;
        });
    }
    
    public show(): void {
        if (!MobileUtils.isMobileDevice()) return;
        
        this.container.style.display = 'block';
        this.updateLayout();
    }
    
    public hide(): void {
        this.container.style.display = 'none';
    }
    
    public isKeyPressed(keyCode: string): boolean {
        return this.virtualKeys[keyCode] || false;
    }
    
    public isKeyJustPressed(keyCode: string): boolean {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å—á–∏—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–∞–∫ "just pressed"
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        return this.virtualKeys[keyCode] || false;
    }
    
    public getHorizontalInput(): number {
        let input = 0;
        if (this.isKeyPressed('ArrowLeft')) input -= 1;
        if (this.isKeyPressed('ArrowRight')) input += 1;
        return input;
    }
    
    public isJumpPressed(): boolean {
        return this.isKeyPressed('Space');
    }
    
    public isInteractPressed(): boolean {
        return this.isKeyPressed('KeyE');
    }
    
    public update(): void {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–∂–∞—Ç—ã
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
    
    public getVirtualKeys(): { [key: string]: boolean } {
        return { ...this.virtualKeys };
    }
    
    public destroy(): void {
        if (this.container && this.container.parentNode) {
            this.container.parentNode.removeChild(this.container);
        }
        this.buttons.clear();
        this.virtualKeys = {};
    }
}
