// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API
export class TelegramWebApp {
    private static tg: any = null;

    static init(): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
        if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
            this.tg = (window as any).Telegram.WebApp;
            console.log('üì± Telegram WebApp API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('üîç Telegram –≤–µ—Ä—Å–∏—è:', this.tg.version);
            console.log('üîç Telegram –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', this.tg.platform);
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            if (this.tg.expand) {
                this.tg.expand();
                console.log('üì∫ Telegram: expand() –≤—ã–∑–≤–∞–Ω');
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if (this.tg.setHeaderColor) {
                this.tg.setHeaderColor('#667eea');
            }
            
            // –ü—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            setTimeout(() => {
                this.requestFullscreenLandscape();
                this.setupOrientationControl();
            }, 500);
            
            console.log('üéØ Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
            console.log('‚ÑπÔ∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram)');
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                if ((window as any).Telegram?.WebApp) {
                    console.log('üîÑ Telegram WebApp API –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
                    this.init();
                }
            }, 1000);
        }
    }

    static isTelegramWebApp(): boolean {
        return this.tg !== null;
    }

    static async requestFullscreenLandscape(): Promise<boolean> {
        if (!this.tg) {
            console.log('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }

        try {
            console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram:', Object.keys(this.tg));
            console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', this.tg.platform);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if (!['ios', 'android'].includes(this.tg.platform)) {
                console.log('‚ÑπÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö');
                return false;
            }

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            if (this.tg.lockOrientation) {
                try {
                    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    this.tg.lockOrientation('landscape-primary');
                    console.log('üîí Telegram: –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (landscape-primary)');
                    return true;
                } catch (error) {
                    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ lockOrientation landscape-primary:', error);
                    try {
                        this.tg.lockOrientation('landscape');
                        console.log('üîí Telegram: –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (landscape)');
                        return true;
                    } catch (error2) {
                        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ lockOrientation landscape:', error2);
                    }
                }
            } else {
                console.log('‚ùå lockOrientation –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            }

            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞
            if (this.tg.requestFullscreen) {
                try {
                    await this.tg.requestFullscreen();
                    console.log('üì∫ Telegram: –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                } catch (error) {
                    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ requestFullscreen:', error);
                }
            }

            // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
            if (this.tg.enableClosingConfirmation) {
                this.tg.enableClosingConfirmation();
                console.log('‚úÖ Telegram: –í–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è');
            }

            return true;
        } catch (error) {
            console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram WebApp:', error);
            return false;
        }
    }

    static isFullscreen(): boolean {
        return this.tg?.isFullscreen || false;
    }

    static exitFullscreen(): void {
        if (this.tg?.exitFullscreen) {
            this.tg.exitFullscreen();
            console.log('üö™ Telegram: –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        }
    }

    static onFullscreenChanged(callback: (isFullscreen: boolean) => void): void {
        if (this.tg) {
            this.tg.onEvent('fullscreenChanged', callback);
        }
    }

    static onOrientationChanged(callback: () => void): void {
        if (this.tg) {
            this.tg.onEvent('orientationChanged', callback);
        }
    }

    static setupOrientationControl(): void {
        if (!this.tg || !['ios', 'android'].includes(this.tg.platform)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        const checkAndLockOrientation = () => {
            if (typeof screen !== 'undefined' && screen.orientation) {
                console.log('üì± –¢–µ–∫—É—â–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è:', screen.orientation.type);
                
                // –ï—Å–ª–∏ –Ω–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º
                if (!screen.orientation.type.startsWith('landscape')) {
                    this.lockLandscapeOrientation();
                }
            } else {
                // Fallback: –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                this.lockLandscapeOrientation();
            }
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
        if (typeof window !== 'undefined') {
            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
            window.addEventListener('orientationchange', checkAndLockOrientation);
            
            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.tg.onEvent('activated', checkAndLockOrientation);
            this.tg.onEvent('deactivated', () => {
                console.log('üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
            });
        }

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        checkAndLockOrientation();
    }

    static lockLandscapeOrientation(): void {
        if (!this.tg || !this.tg.lockOrientation) {
            console.log('‚ùå lockOrientation –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ lockLandscapeOrientation');
            return;
        }

        try {
            this.tg.lockOrientation('landscape-primary');
            console.log('üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (landscape-primary)');
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ landscape-primary:', error);
            try {
                this.tg.lockOrientation('landscape');
                console.log('üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (landscape)');
            } catch (error2) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ landscape:', error2);
            }
        }
    }

    static unlockOrientation(): void {
        if (!this.tg || !this.tg.unlockOrientation) {
            return;
        }

        try {
            this.tg.unlockOrientation();
            console.log('üîì –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏:', error);
        }
    }

    static close(): void {
        if (this.tg) {
            this.tg.close();
        }
    }

    static ready(): void {
        if (this.tg) {
            this.tg.ready();
        }
    }
}
