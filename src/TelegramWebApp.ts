// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp API
export class TelegramWebApp {
    private static tg: any = null;

    static init(): void {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram WebApp API
        if (typeof window !== 'undefined' && (window as any).Telegram?.WebApp) {
            this.tg = (window as any).Telegram.WebApp;
            console.log('üì± Telegram WebApp API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            console.log('üîç Telegram –≤–µ—Ä—Å–∏—è:', this.tg.version);
            console.log('üîç Telegram –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:', this.tg.platform);
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            if (this.tg.expand) {
                this.tg.expand();
                console.log('üì∫ Telegram: expand() –≤—ã–∑–≤–∞–Ω');
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
            if (this.tg.setHeaderColor) {
                this.tg.setHeaderColor('#667eea');
            }
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            this.requestFullscreenLandscape();
            
            // –ò –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                this.requestFullscreenLandscape();
            }, 100);
            
            // –ò –µ—â–µ —Ä–∞–∑ —Å –±–æ–ª—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                this.requestFullscreenLandscape();
            }, 1000);
            
            console.log('üéØ Telegram WebApp –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
            console.log('‚ÑπÔ∏è Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–ø—É—Å–∫ –≤–Ω–µ Telegram)');
            
            // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
                if ((window as any).Telegram?.WebApp) {
                    console.log('üîÑ Telegram WebApp API –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
                    this.init();
                }
            }, 1000);
        }
    }

    static isTelegramWebApp(): boolean {
        return this.tg !== null;
    }

    static async requestFullscreenLandscape(): Promise<boolean> {
        if (!this.tg) {
            console.log('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }

        try {
            console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã Telegram:', Object.keys(this.tg));
            console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', this.tg.platform);
            console.log('üì± –í–µ—Ä—Å–∏—è Telegram:', this.tg.version);
            
            // –ü—Ä–æ—Å—Ç–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Screen Orientation API
            this.lockScreenOrientation();

            // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
            if (this.tg.expand) {
                this.tg.expand();
                console.log('üì∫ Telegram: expand() –≤—ã–ø–æ–ª–Ω–µ–Ω');
            }

            if (this.tg.enableClosingConfirmation) {
                this.tg.enableClosingConfirmation();
                console.log('‚úÖ Telegram: –í–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è');
            }

            return true;
        } catch (error) {
            console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram WebApp:', error);
            return false;
        }
    }

    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
    static async lockScreenOrientation(): Promise<void> {
        try {
            // 1. –ü—Ä–æ–±—É–µ–º Screen Orientation API
            if ((screen as any).orientation && (screen as any).orientation.lock) {
                try {
                    await (screen as any).orientation.lock('landscape');
                    console.log('‚úÖ Screen Orientation API: landscape –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
                    return;
                } catch (error) {
                    console.log('‚ö†Ô∏è Screen Orientation API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
                }
            }

            // 2. –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º HTML5
            const gameContainer = document.getElementById('gameContainer');
            if (gameContainer && gameContainer.requestFullscreen) {
                try {
                    await gameContainer.requestFullscreen();
                    console.log('‚úÖ HTML5 Fullscreen –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                    
                    // –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–±—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                    setTimeout(async () => {
                        try {
                            if ((screen as any).orientation && (screen as any).orientation.lock) {
                                await (screen as any).orientation.lock('landscape');
                                console.log('‚úÖ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                            }
                        } catch (e) {
                            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                        }
                    }, 100);
                    return;
                } catch (error) {
                    console.log('‚ö†Ô∏è HTML5 Fullscreen –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error);
                }
            }

            // 3. Fallback - CSS –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç
            console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º CSS fallback –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏');
            this.applyCSSLandscapeForce();

        } catch (error) {
            console.error('‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏:', error);
        }
    }

    // CSS –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    static applyCSSLandscapeForce(): void {
        const isPortrait = window.innerHeight > window.innerWidth;
        if (!isPortrait) {
            console.log('‚úÖ –£–∂–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ');
            return;
        }

        console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        
        const style = document.createElement('style');
        style.id = 'force-landscape-style';
        style.textContent = `
            body.force-landscape {
                overflow: hidden;
            }
            body.force-landscape #gameContainer {
                transform: rotate(90deg) translate(0, -100%);
                transform-origin: top left;
                width: 100vh;
                height: 100vw;
                position: fixed;
                top: 0;
                left: 0;
            }
        `;
        
        if (!document.getElementById('force-landscape-style')) {
            document.head.appendChild(style);
        }
        
        document.body.classList.add('force-landscape');
        console.log('‚úÖ CSS –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω');
    }

    static isFullscreen(): boolean {
        return this.tg?.isFullscreen || false;
    }

    static exitFullscreen(): void {
        if (this.tg?.exitFullscreen) {
            this.tg.exitFullscreen();
            console.log('üö™ Telegram: –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        }
    }

    static onFullscreenChanged(callback: (isFullscreen: boolean) => void): void {
        if (this.tg) {
            this.tg.onEvent('fullscreenChanged', callback);
        }
    }

    static onOrientationChanged(callback: () => void): void {
        if (this.tg) {
            this.tg.onEvent('orientationChanged', callback);
        }
    }



    static close(): void {
        if (this.tg) {
            this.tg.close();
        }
    }

    static ready(): void {
        if (this.tg) {
            this.tg.ready();
        }
    }
}
