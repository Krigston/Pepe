import { Game } from './Game';
import { InputManager } from './InputManager';
import { AudioManager } from './AudioManager';
import { MobileUtils } from './MobileUtils';
import { VersionManager } from './VersionManager';
import { TelegramWebApp } from './TelegramWebApp';

class Main {
    private game: Game;
    private inputManager: InputManager;
    private audioManager: AudioManager;

    constructor() {
        console.log('üéÆ Pepe Game –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
        console.log(`üìù –í–µ—Ä—Å–∏—è: ${VersionManager.getVersion()}`);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        TelegramWebApp.init();
        
        this.audioManager = new AudioManager();
        this.inputManager = new InputManager();
        this.game = new Game(this.inputManager, this.audioManager);
        
        this.initializeMobileSupport();
        this.initializeVersionDisplay();
        this.initializeUI();
        
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        this.showGamePrepModal();
        
        this.startGameLoop();
    }
    
    private async initializeMobileSupport(): Promise<void> {
        const isMobile = MobileUtils.isMobileDevice();
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - isMobile: ${isMobile}`);
        console.log(`üì± –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${window.innerWidth}x${window.innerHeight}`);
        console.log(`üëÜ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—á: ${'ontouchstart' in window}`);
        console.log(`üñ±Ô∏è maxTouchPoints: ${navigator.maxTouchPoints}`);
        console.log(`üåê User Agent: ${navigator.userAgent}`);
        console.log(`üìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${MobileUtils.isLandscape() ? 'landscape' : 'portrait'}`);
        
        if (isMobile) {
            console.log('üî• –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingSplash();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º
            this.disableMobileZoom();
            
            // –ü—Ä–æ—Å—Ç–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–æ–¥ –ª—é–±—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            await this.setupOrientationAdaptation();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.inputManager.showMobileControls();
            
            console.log('üí™ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
            console.log('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –º–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        }
    }
    
    private showLoadingSplash(): void {
        const splash = document.createElement('div');
        splash.id = 'loadingSplash';
        splash.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            color: white;
            font-family: Arial, sans-serif;
        `;
        
        splash.innerHTML = `
            <div style="font-size: 48px; margin-bottom: 20px;">üê∏</div>
            <div style="font-size: 24px; font-weight: bold; margin-bottom: 10px;">–ü–µ–ø–µ: –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ</div>
            <div style="font-size: 16px; opacity: 0.8;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
            <div style="margin-top: 20px; width: 200px; height: 4px; background: rgba(255,255,255,0.3); border-radius: 2px; overflow: hidden;">
                <div style="width: 100%; height: 100%; background: white; animation: loadingBar 1s ease-in-out;"></div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        const style = document.createElement('style');
        style.textContent = `
            @keyframes loadingBar {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(0); }
            }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(splash);
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            splash.remove();
        }, 1000);
    }
    
    private async setupOrientationAdaptation(): Promise<void> {
        const isPortrait = window.innerHeight > window.innerWidth;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Telegram WebApp API
        if (TelegramWebApp.isTelegramWebApp()) {
            console.log('üì± –ó–∞–ø—É—Å–∫ –≤ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º WebApp API');
            
            // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∏–≥—Ä—ã
            await TelegramWebApp.requestFullscreenLandscape();
            TelegramWebApp.ensureLandscapeMode();
            
                document.body.classList.add('landscape-ready');
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
                TelegramWebApp.ready();
                return;
        }
        
        // Fallback –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        if (isPortrait) {
            console.log('üì± –ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ—Ä–æ—Ç–µ');
            this.showRotateMessage();
        } else {
            console.log('üñ•Ô∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞');
            document.body.classList.add('landscape-ready');
        }
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                location.reload();
            }, 100);
        });
        
        console.log('üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }
    
    private showGamePrepModal(): void {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.id = 'game-prep-modal';
        modal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 99999;
            backdrop-filter: blur(10px);
        `;

        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
            background: linear-gradient(145deg, #2a2a2a, #1a1a1a);
            border: 3px solid #4CAF50;
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            color: white;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            max-width: 400px;
            margin: 20px;
        `;

        modalContent.innerHTML = `
            <div style="font-size: 3rem; margin-bottom: 20px;">üéÆ</div>
            <h2 style="margin: 0 0 15px 0; color: #4CAF50;">–ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é?</h2>
            <p style="margin: 0 0 25px 0; opacity: 0.9; line-height: 1.4;">
                –î–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞ –∏–≥—Ä–∞ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–¥ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            </p>
            <button id="start-game-btn" style="
                background: linear-gradient(145deg, #4CAF50, #45a049);
                color: white;
                border: none;
                padding: 15px 30px;
                border-radius: 25px;
                font-size: 18px;
                font-weight: bold;
                cursor: pointer;
                box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
                transition: all 0.3s ease;
                width: 100%;
            ">üöÄ –ù–∞—á–∞—Ç—å –ò–≥—Ä—É</button>
        `;

        modal.appendChild(modalContent);
        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ò–≥—Ä—É"
        const startGameBtn = modal.querySelector('#start-game-btn') as HTMLButtonElement;
        if (startGameBtn) {
            startGameBtn.addEventListener('click', async () => {
                await this.startGameSequence(modal);
            });
        }

        console.log('üéØ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∏–≥—Ä–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
    }

    private async startGameSequence(modal: HTMLElement): Promise<void> {
        const modalContent = modal.querySelector('div') as HTMLElement;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        modalContent.innerHTML = `
            <div style="font-size: 3rem; margin-bottom: 20px;">‚ö°</div>
            <h2 style="margin: 0 0 15px 0; color: #4CAF50;">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–≥—Ä—ã...</h2>
            <div style="margin: 20px 0;">
                <div style="width: 100%; height: 4px; background: #333; border-radius: 2px; overflow: hidden;">
                    <div id="progress-bar" style="width: 0%; height: 100%; background: linear-gradient(90deg, #4CAF50, #45a049); border-radius: 2px; transition: width 0.3s ease;"></div>
                </div>
            </div>
            <p id="loading-text" style="margin: 15px 0 0 0; opacity: 0.8; font-size: 14px;">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞...</p>
        `;

        const progressBar = modal.querySelector('#progress-bar') as HTMLElement;
        const loadingText = modal.querySelector('#loading-text') as HTMLElement;

        // –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã (25%)
        progressBar.style.width = '25%';
        loadingText.textContent = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã...';
        await this.delay(800);
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupResponsiveGame();
        console.log('‚úÖ –ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        // –≠—Ç–∞–ø 2: –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (50%)
        progressBar.style.width = '50%';
        loadingText.textContent = '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...';
        await this.delay(800);

        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if (document.documentElement.requestFullscreen) {
                await document.documentElement.requestFullscreen();
                console.log('‚úÖ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
            } else if ((document.documentElement as any).webkitRequestFullscreen) {
                await (document.documentElement as any).webkitRequestFullscreen();
                console.log('‚úÖ WebKit –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            } else if ((document.documentElement as any).mozRequestFullScreen) {
                await (document.documentElement as any).mozRequestFullScreen();
                console.log('‚úÖ Mozilla –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            } else if ((document.documentElement as any).msRequestFullscreen) {
                await (document.documentElement as any).msRequestFullscreen();
                console.log('‚úÖ MS –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            } else {
                console.log('‚ö†Ô∏è –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
        }

        // –≠—Ç–∞–ø 3: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (75%)
        progressBar.style.width = '75%';
        loadingText.textContent = '–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...';
        await this.delay(800);

        TelegramWebApp.ensureLandscapeMode();

        // –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã (100%)
        progressBar.style.width = '100%';
        loadingText.textContent = '–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...';
        await this.delay(800);

        // –°–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        const menu = document.getElementById('menu');
        if (menu) menu.classList.add('hidden');
        
        this.game.start();

        // –£–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.remove();

        console.log('üéÆ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    private setupResponsiveGame(): void {
        console.log('üéÆ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∏–≥—Ä—ã');
        
        const isMobile = MobileUtils.isMobileDevice();
        
        if (isMobile) {
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –¥–µ–ª–∞–µ–º –∏–≥—Ä—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π
            this.forceLandscapeMode();
        } else {
            // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas
            this.setupAdaptiveCanvas();
        }
        
        console.log(`üì± –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö`);
    }

    private forceLandscapeMode(): void {
        console.log('üîÑ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ø–æ–≤–æ—Ä–æ—Ç –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
        
        // 1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viewport –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.setupLandscapeViewport();
        
        // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º CSS transform –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.applyLandscapeTransform();
        
        // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas –ø–æ–¥ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        this.setupLandscapeCanvas();
        
        console.log('‚úÖ –ò–≥—Ä–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º');
    }

    private setupLandscapeViewport(): void {
        const viewport = document.querySelector('meta[name="viewport"]') as HTMLMetaElement;
        if (viewport) {
            // –≠–º—É–ª–∏—Ä—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ viewport
            const height = window.innerHeight;
            const width = window.innerWidth;
            
            if (height > width) {
                // –ï—Å–ª–∏ portrait - –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ä–∞–∑–º–µ—Ä—ã –≤ viewport
                viewport.content = `width=${height}, height=${width}, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover`;
                console.log(`üìê Viewport –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${height}x${width} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)`);
            }
        }
    }

    private applyLandscapeTransform(): void {
        const height = window.innerHeight;
        const width = window.innerWidth;
        
        if (height > width) {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS transform –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
            const style = document.createElement('style');
            style.id = 'force-landscape-transform';
            style.textContent = `
                body {
                    width: 100vh !important;
                    height: 100vw !important;
                    transform: rotate(90deg) !important;
                    transform-origin: center center !important;
                    position: fixed !important;
                    top: 50% !important;
                    left: 50% !important;
                    margin-left: -50vh !important;
                    margin-top: -50vw !important;
                    overflow: hidden !important;
                }
                
                #gameContainer {
                    width: 100% !important;
                    height: 100% !important;
                    position: relative !important;
                }
                
                #gameCanvas {
                    width: 100% !important;
                    height: 100% !important;
                    display: block !important;
                }
                
                #menu {
                    display: none !important;
                }
            `;
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            const oldStyle = document.getElementById('force-landscape-transform');
            if (oldStyle) oldStyle.remove();
            document.head.appendChild(style);
            
            console.log('üé® CSS transform –ø—Ä–∏–º–µ–Ω–µ–Ω –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞');
        }
    }

    private setupLandscapeCanvas(): void {
        const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
        if (!canvas) return;
        
        const height = window.innerHeight;
        const width = window.innerWidth;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º canvas –ø–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        if (height > width) {
            // –ü—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ –≤—ã—Å–æ—Ç–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —à–∏—Ä–∏–Ω–æ–π –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
            canvas.width = height;
            canvas.height = width;
        } else {
            canvas.width = width;
            canvas.height = height;
        }
        
        console.log(`üéÆ Canvas –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: ${canvas.width}x${canvas.height}`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        setTimeout(() => {
            window.dispatchEvent(new Event('resize'));
        }, 100);
    }

    private setupAdaptiveCanvas(): void {
        const canvas = document.getElementById('gameCanvas') as HTMLCanvasElement;
        if (!canvas) return;
        
        // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ - –æ–±—ã—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        canvas.style.width = '100vw';
        canvas.style.height = '100vh';
        canvas.style.objectFit = 'contain';
        
        const rect = canvas.getBoundingClientRect();
        canvas.width = rect.width;
        canvas.height = rect.height;
        
        console.log(`üñ•Ô∏è Desktop canvas: ${canvas.width}x${canvas.height}`);
    }


    

    
    private showRotateMessage(): void {
        const message = document.createElement('div');
        message.className = 'rotate-message';
        message.innerHTML = `
            <div class="rotate-content">
                <div class="rotate-icon">üì±‚û°Ô∏èüì±</div>
                <h2>–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</h2>
                <p>–î–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞<br>–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é</p>
            </div>
        `;
        
        document.body.appendChild(message);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const gameContainer = document.querySelector('#gameContainer') as HTMLElement;
        if (gameContainer) {
            gameContainer.style.display = 'none';
        }
    }
    

    

    
    private disableMobileZoom(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport meta tag
        let viewportMeta = document.querySelector('meta[name="viewport"]') as HTMLMetaElement;
        if (!viewportMeta) {
            viewportMeta = document.createElement('meta');
            viewportMeta.name = 'viewport';
            document.head.appendChild(viewportMeta);
        }
        
        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no';
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        }, { passive: false });
        
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (e) => {
            const now = Date.now();
            if (now - lastTouchEnd <= 300) {
                e.preventDefault();
            }
            lastTouchEnd = now;
        }, { passive: false });
    }
    

    
    private initializeVersionDisplay(): void {
        const versionIndicator = document.getElementById('versionIndicator');
        if (versionIndicator) {
            const buildInfo = VersionManager.getBuildInfo();
            versionIndicator.textContent = VersionManager.getFormattedVersion();
            
            // –î–æ–±–∞–≤–ª—è–µ–º tooltip —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            versionIndicator.title = `–í–µ—Ä—Å–∏—è: ${buildInfo.version}\n–°–±–æ—Ä–∫–∞: ${buildInfo.buildDate}`;
            
            console.log(`üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ - ${VersionManager.getFormattedVersion()}`);
            console.log('Build Info:', buildInfo);
        }
    }

    private initializeUI(): void {
        const startBtn = document.getElementById('startBtn');
        const instructionsBtn = document.getElementById('instructionsBtn');

        if (startBtn) {
            startBtn.addEventListener('click', async () => {
                // –ù–∞–ø—Ä—è–º—É—é –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É (–º–æ–¥–∞–ª–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ)
                this.game.start();
                const menu = document.getElementById('menu');
                if (menu) menu.classList.add('hidden');
            });
        }

        if (instructionsBtn) {
            instructionsBtn.addEventListener('click', () => {
                this.showInstructions();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
        const newLevelBtn = document.getElementById('newLevelBtn');
        if (newLevelBtn) {
            newLevelBtn.addEventListener('click', () => {
                this.game.resetToNewLevel(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1
            });
        }
    }

    private showInstructions(): void {
        const menu = document.getElementById('menu');
        if (menu) {
            const isMobile = MobileUtils.isMobileDevice();
            
            menu.innerHTML = `
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                ${isMobile ? 
                    `<p><strong>–õ–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ –ø—Ä—ã–∂–æ–∫</p>
                     <p><strong>–ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –ü—Ä—ã–∂–æ–∫ (ü¶ò) –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (E)</p>` :
                    `<p><strong>WASD</strong> –∏–ª–∏ <strong>–°—Ç—Ä–µ–ª–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ</p>
                     <p><strong>–ü—Ä–æ–±–µ–ª</strong> - –ü—Ä—ã–∂–æ–∫</p>
                     <p><strong>E</strong> - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</p>`
                }
                <br>
                <h3>üéØ –¶–µ–ª—å –∏–≥—Ä—ã</h3>
                <p>‚Ä¢ –°–æ–±–∏—Ä–∞–π –º–µ–º—ã –¥–ª—è –æ—á–∫–æ–≤</p>
                <p>‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç—Ä–æ–ª–ª–µ–π</p>
                <p>‚Ä¢ –î–æ—Å—Ç–∏–≥–∞–π —Ñ–∏–Ω–∏—à–∞</p>
                <p>‚Ä¢ –ù–∞–π–¥–∏ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã!</p>
                ${isMobile ? '<p><strong>–ò–≥—Ä–∞–π—Ç–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!</strong></p>' : ''}
                <br>
                <button id="backBtn">–ù–∞–∑–∞–¥</button>
            `;

            const backBtn = document.getElementById('backBtn');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    location.reload();
                });
            }
        }
    }

    private startGameLoop(): void {
        const gameLoop = () => {
            this.game.update();
            this.game.render();
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
window.addEventListener('load', () => {
    new Main();
}); 