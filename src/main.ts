import { Game } from './Game';
import { InputManager } from './InputManager';
import { AudioManager } from './AudioManager';
import { MobileUtils } from './MobileUtils';
import { VersionManager } from './VersionManager';

class Main {
    private game: Game;
    private inputManager: InputManager;
    private audioManager: AudioManager;

    constructor() {
        this.audioManager = new AudioManager();
        this.inputManager = new InputManager();
        this.game = new Game(this.inputManager, this.audioManager);
        
        this.initializeMobileSupport();
        this.initializeVersionDisplay();
        this.initializeUI();
        this.startGameLoop();
    }
    
    private async initializeMobileSupport(): Promise<void> {
        const isMobile = MobileUtils.isMobileDevice();
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - isMobile: ${isMobile}`);
        console.log(`üì± –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${window.innerWidth}x${window.innerHeight}`);
        console.log(`üëÜ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—á: ${'ontouchstart' in window}`);
        console.log(`üñ±Ô∏è maxTouchPoints: ${navigator.maxTouchPoints}`);
        console.log(`üåê User Agent: ${navigator.userAgent}`);
        console.log(`üìê –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${MobileUtils.isLandscape() ? 'landscape' : 'portrait'}`);
        
        if (isMobile) {
            console.log('üî• –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingSplash();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º
            this.disableMobileZoom();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥ –∑–∞–≥–ª—É—à–∫–æ–π
            this.setupAutoRotation();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.inputManager.showMobileControls();
            
            console.log('üí™ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
            console.log('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –º–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        }
    }
    
    private showLoadingSplash(): void {
        const splash = document.createElement('div');
        splash.id = 'loadingSplash';
        splash.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            color: white;
            font-family: Arial, sans-serif;
        `;
        
        splash.innerHTML = `
            <div style="font-size: 48px; margin-bottom: 20px;">üê∏</div>
            <div style="font-size: 24px; font-weight: bold; margin-bottom: 10px;">–ü–µ–ø–µ: –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ</div>
            <div style="font-size: 16px; opacity: 0.8;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</div>
            <div style="margin-top: 20px; width: 200px; height: 4px; background: rgba(255,255,255,0.3); border-radius: 2px; overflow: hidden;">
                <div style="width: 100%; height: 100%; background: white; animation: loadingBar 1s ease-in-out;"></div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
        const style = document.createElement('style');
        style.textContent = `
            @keyframes loadingBar {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(0); }
            }
        `;
        document.head.appendChild(style);
        
        document.body.appendChild(splash);
        
        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            splash.remove();
        }, 1000);
    }
    
    private setupAutoRotation(): void {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Screen Orientation API
        const triggerRotation = () => {
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ "–Ω–∞–∂–∏–º–∞–µ–º" –µ—ë
            const hiddenButton = document.createElement('button');
            hiddenButton.style.cssText = `
                position: absolute;
                top: -9999px;
                left: -9999px;
                width: 1px;
                height: 1px;
                opacity: 0;
                pointer-events: none;
            `;
            
            hiddenButton.addEventListener('click', async () => {
                const success = await MobileUtils.lockToLandscape();
                if (success) {
                    console.log('üéØ –ê–≤—Ç–æ–ø–æ–≤–æ—Ä–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å–∫—Ä—ã—Ç–æ!');
                }
                hiddenButton.remove();
            });
            
            document.body.appendChild(hiddenButton);
            
            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫
            setTimeout(() => {
                hiddenButton.click();
            }, 100);
        };
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ–¥ –∑–∞–≥–ª—É—à–∫–æ–π
        setTimeout(triggerRotation, 200);
    }
    

    

    
    private disableMobileZoom(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport meta tag
        let viewportMeta = document.querySelector('meta[name="viewport"]') as HTMLMetaElement;
        if (!viewportMeta) {
            viewportMeta = document.createElement('meta');
            viewportMeta.name = 'viewport';
            document.head.appendChild(viewportMeta);
        }
        
        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no';
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        }, { passive: false });
        
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (e) => {
            const now = Date.now();
            if (now - lastTouchEnd <= 300) {
                e.preventDefault();
            }
            lastTouchEnd = now;
        }, { passive: false });
    }
    

    
    private initializeVersionDisplay(): void {
        const versionIndicator = document.getElementById('versionIndicator');
        if (versionIndicator) {
            const buildInfo = VersionManager.getBuildInfo();
            versionIndicator.textContent = VersionManager.getFormattedVersion();
            
            // –î–æ–±–∞–≤–ª—è–µ–º tooltip —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            versionIndicator.title = `–í–µ—Ä—Å–∏—è: ${buildInfo.version}\n–°–±–æ—Ä–∫–∞: ${buildInfo.buildDate}`;
            
            console.log(`üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ - ${VersionManager.getFormattedVersion()}`);
            console.log('Build Info:', buildInfo);
        }
    }

    private initializeUI(): void {
        const startBtn = document.getElementById('startBtn');
        const instructionsBtn = document.getElementById('instructionsBtn');
        const menu = document.getElementById('menu');

        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.game.start();
                if (menu) menu.classList.add('hidden');
            });
        }

        if (instructionsBtn) {
            instructionsBtn.addEventListener('click', () => {
                this.showInstructions();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
        const newLevelBtn = document.getElementById('newLevelBtn');
        if (newLevelBtn) {
            newLevelBtn.addEventListener('click', () => {
                this.game.resetToNewLevel(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1
            });
        }
    }

    private showInstructions(): void {
        const menu = document.getElementById('menu');
        if (menu) {
            const isMobile = MobileUtils.isMobileDevice();
            
            menu.innerHTML = `
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                ${isMobile ? 
                    `<p><strong>–õ–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ –ø—Ä—ã–∂–æ–∫</p>
                     <p><strong>–ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –ü—Ä—ã–∂–æ–∫ (ü¶ò) –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (E)</p>` :
                    `<p><strong>WASD</strong> –∏–ª–∏ <strong>–°—Ç—Ä–µ–ª–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ</p>
                     <p><strong>–ü—Ä–æ–±–µ–ª</strong> - –ü—Ä—ã–∂–æ–∫</p>
                     <p><strong>E</strong> - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</p>`
                }
                <br>
                <h3>üéØ –¶–µ–ª—å –∏–≥—Ä—ã</h3>
                <p>‚Ä¢ –°–æ–±–∏—Ä–∞–π –º–µ–º—ã –¥–ª—è –æ—á–∫–æ–≤</p>
                <p>‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç—Ä–æ–ª–ª–µ–π</p>
                <p>‚Ä¢ –î–æ—Å—Ç–∏–≥–∞–π —Ñ–∏–Ω–∏—à–∞</p>
                <p>‚Ä¢ –ù–∞–π–¥–∏ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã!</p>
                ${isMobile ? '<p><strong>–ò–≥—Ä–∞–π—Ç–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!</strong></p>' : ''}
                <br>
                <button id="backBtn">–ù–∞–∑–∞–¥</button>
            `;

            const backBtn = document.getElementById('backBtn');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    location.reload();
                });
            }
        }
    }

    private startGameLoop(): void {
        const gameLoop = () => {
            this.game.update();
            this.game.render();
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
window.addEventListener('load', () => {
    new Main();
}); 