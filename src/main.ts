import { Game } from './Game';
import { InputManager } from './InputManager';
import { AudioManager } from './AudioManager';
import { MobileUtils } from './MobileUtils';
import { VersionManager } from './VersionManager';

class Main {
    private game: Game;
    private inputManager: InputManager;
    private audioManager: AudioManager;

    constructor() {
        this.audioManager = new AudioManager();
        this.inputManager = new InputManager();
        this.game = new Game(this.inputManager, this.audioManager);
        
        this.initializeMobileSupport();
        this.initializeVersionDisplay();
        this.initializeUI();
        this.startGameLoop();
    }
    
    private initializeMobileSupport(): void {
        const isMobile = MobileUtils.isMobileDevice();
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - isMobile: ${isMobile}`);
        console.log(`üì± –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: ${window.innerWidth}x${window.innerHeight}`);
        console.log(`üëÜ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—á: ${'ontouchstart' in window}`);
        console.log(`üñ±Ô∏è maxTouchPoints: ${navigator.maxTouchPoints}`);
        console.log(`üåê User Agent: ${navigator.userAgent}`);
        
        if (isMobile) {
            console.log('üî• –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è!');
            
            // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            MobileUtils.lockToLandscape();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
            MobileUtils.continuousLandscapeLock();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º
            this.disableMobileZoom();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º  
            this.setupFullscreen();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            this.inputManager.showMobileControls();
            
            console.log('üí™ –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ô –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π');
        } else {
            console.log('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –º–æ–±–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        }
    }
    

    
    private disableMobileZoom(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport meta tag
        let viewportMeta = document.querySelector('meta[name="viewport"]') as HTMLMetaElement;
        if (!viewportMeta) {
            viewportMeta = document.createElement('meta');
            viewportMeta.name = 'viewport';
            document.head.appendChild(viewportMeta);
        }
        
        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no';
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        }, { passive: false });
        
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (e) => {
            const now = Date.now();
            if (now - lastTouchEnd <= 300) {
                e.preventDefault();
            }
            lastTouchEnd = now;
        }, { passive: false });
    }
    
    private setupFullscreen(): void {
        // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–π—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        const enterFullscreen = () => {
            MobileUtils.enterFullscreen().then(() => {
                // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                setTimeout(() => {
                    MobileUtils.lockToLandscape();
                }, 100);
            }).catch(console.log);
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            document.removeEventListener('touchstart', enterFullscreen);
        };
        
        document.addEventListener('touchstart', enterFullscreen, { once: true });
        
        // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å—Ä–∞–∑—É
        setTimeout(() => {
            MobileUtils.lockToLandscape();
        }, 1000);
    }
    
    private initializeVersionDisplay(): void {
        const versionIndicator = document.getElementById('versionIndicator');
        if (versionIndicator) {
            const buildInfo = VersionManager.getBuildInfo();
            versionIndicator.textContent = VersionManager.getFormattedVersion();
            
            // –î–æ–±–∞–≤–ª—è–µ–º tooltip —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            versionIndicator.title = `–í–µ—Ä—Å–∏—è: ${buildInfo.version}\n–°–±–æ—Ä–∫–∞: ${buildInfo.buildDate}`;
            
            console.log(`üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ - ${VersionManager.getFormattedVersion()}`);
            console.log('Build Info:', buildInfo);
        }
    }

    private initializeUI(): void {
        const startBtn = document.getElementById('startBtn');
        const instructionsBtn = document.getElementById('instructionsBtn');
        const menu = document.getElementById('menu');

        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.game.start();
                if (menu) menu.classList.add('hidden');
            });
        }

        if (instructionsBtn) {
            instructionsBtn.addEventListener('click', () => {
                this.showInstructions();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
        const newLevelBtn = document.getElementById('newLevelBtn');
        if (newLevelBtn) {
            newLevelBtn.addEventListener('click', () => {
                this.game.resetToNewLevel(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1
            });
        }
    }

    private showInstructions(): void {
        const menu = document.getElementById('menu');
        if (menu) {
            const isMobile = MobileUtils.isMobileDevice();
            
            menu.innerHTML = `
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                ${isMobile ? 
                    `<p><strong>–õ–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ –ø—Ä—ã–∂–æ–∫</p>
                     <p><strong>–ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –ü—Ä—ã–∂–æ–∫ (ü¶ò) –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (E)</p>` :
                    `<p><strong>WASD</strong> –∏–ª–∏ <strong>–°—Ç—Ä–µ–ª–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ</p>
                     <p><strong>–ü—Ä–æ–±–µ–ª</strong> - –ü—Ä—ã–∂–æ–∫</p>
                     <p><strong>E</strong> - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</p>`
                }
                <br>
                <h3>üéØ –¶–µ–ª—å –∏–≥—Ä—ã</h3>
                <p>‚Ä¢ –°–æ–±–∏—Ä–∞–π –º–µ–º—ã –¥–ª—è –æ—á–∫–æ–≤</p>
                <p>‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç—Ä–æ–ª–ª–µ–π</p>
                <p>‚Ä¢ –î–æ—Å—Ç–∏–≥–∞–π —Ñ–∏–Ω–∏—à–∞</p>
                <p>‚Ä¢ –ù–∞–π–¥–∏ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã!</p>
                ${isMobile ? '<p><strong>–ò–≥—Ä–∞–π—Ç–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!</strong></p>' : ''}
                <br>
                <button id="backBtn">–ù–∞–∑–∞–¥</button>
            `;

            const backBtn = document.getElementById('backBtn');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    location.reload();
                });
            }
        }
    }

    private startGameLoop(): void {
        const gameLoop = () => {
            this.game.update();
            this.game.render();
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
window.addEventListener('load', () => {
    new Main();
}); 