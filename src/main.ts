import { Game } from './Game';
import { InputManager } from './InputManager';
import { AudioManager } from './AudioManager';
import { MobileUtils } from './MobileUtils';

class Main {
    private game: Game;
    private inputManager: InputManager;
    private audioManager: AudioManager;

    constructor() {
        this.audioManager = new AudioManager();
        this.inputManager = new InputManager();
        this.game = new Game(this.inputManager, this.audioManager);
        
        this.initializeMobileSupport();
        this.initializeUI();
        this.startGameLoop();
    }
    
    private initializeMobileSupport(): void {
        if (MobileUtils.isMobileDevice()) {
            console.log('–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            this.encourageLandscapeMode();
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º
            this.disableMobileZoom();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
            this.setupFullscreen();
        }
    }
    
    private encourageLandscapeMode(): void {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ—Ä–æ—Ç–µ —ç–∫—Ä–∞–Ω–∞
        const orientationMessage = document.createElement('div');
        orientationMessage.id = 'orientationMessage';
        orientationMessage.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.9);
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
        `;
        
        orientationMessage.innerHTML = `
            <div style="font-size: 24px; margin-bottom: 20px;">üì±‚û°Ô∏èüì±</div>
            <div style="font-size: 18px; margin-bottom: 10px;">–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</div>
            <div style="font-size: 14px;">–¥–ª—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–ø—ã—Ç–∞</div>
        `;
        
        const checkOrientation = () => {
            if (MobileUtils.isLandscape() || window.innerWidth > 768) {
                if (orientationMessage.parentNode) {
                    orientationMessage.parentNode.removeChild(orientationMessage);
                }
            } else {
                if (!orientationMessage.parentNode) {
                    document.body.appendChild(orientationMessage);
                }
            }
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        setTimeout(checkOrientation, 100);
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', () => {
            setTimeout(checkOrientation, 500);
        });
        
        window.addEventListener('resize', checkOrientation);
    }
    
    private disableMobileZoom(): void {
        // –û–±–Ω–æ–≤–ª—è–µ–º viewport meta tag
        let viewportMeta = document.querySelector('meta[name="viewport"]') as HTMLMetaElement;
        if (!viewportMeta) {
            viewportMeta = document.createElement('meta');
            viewportMeta.name = 'viewport';
            document.head.appendChild(viewportMeta);
        }
        
        viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no';
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –∂–µ—Å—Ç–∞–º–∏
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length > 1) {
                e.preventDefault();
            }
        }, { passive: false });
        
        let lastTouchEnd = 0;
        document.addEventListener('touchend', (e) => {
            const now = Date.now();
            if (now - lastTouchEnd <= 300) {
                e.preventDefault();
            }
            lastTouchEnd = now;
        }, { passive: false });
    }
    
    private setupFullscreen(): void {
        // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–π—Ç–∏ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º touch
        const enterFullscreen = () => {
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen().catch(console.log);
            } else if ((document.documentElement as any).webkitRequestFullscreen) {
                (document.documentElement as any).webkitRequestFullscreen();
            }
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            document.removeEventListener('touchstart', enterFullscreen);
        };
        
        document.addEventListener('touchstart', enterFullscreen, { once: true });
    }

    private initializeUI(): void {
        const startBtn = document.getElementById('startBtn');
        const instructionsBtn = document.getElementById('instructionsBtn');
        const menu = document.getElementById('menu');

        if (startBtn) {
            startBtn.addEventListener('click', () => {
                this.game.start();
                if (menu) menu.classList.add('hidden');
            });
        }

        if (instructionsBtn) {
            instructionsBtn.addEventListener('click', () => {
                this.showInstructions();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"
        const newLevelBtn = document.getElementById('newLevelBtn');
        if (newLevelBtn) {
            newLevelBtn.addEventListener('click', () => {
                this.game.resetToNewLevel(); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å 1
            });
        }
    }

    private showInstructions(): void {
        const menu = document.getElementById('menu');
        if (menu) {
            const isMobile = MobileUtils.isMobileDevice();
            
            menu.innerHTML = `
                <h2>üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                ${isMobile ? 
                    `<p><strong>–õ–µ–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ –∏ –ø—Ä—ã–∂–æ–∫</p>
                     <p><strong>–ü—Ä–∞–≤—ã–µ –∫–Ω–æ–ø–∫–∏</strong> - –ü—Ä—ã–∂–æ–∫ (ü¶ò) –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ (E)</p>` :
                    `<p><strong>WASD</strong> –∏–ª–∏ <strong>–°—Ç—Ä–µ–ª–∫–∏</strong> - –î–≤–∏–∂–µ–Ω–∏–µ</p>
                     <p><strong>–ü—Ä–æ–±–µ–ª</strong> - –ü—Ä—ã–∂–æ–∫</p>
                     <p><strong>E</strong> - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</p>`
                }
                <br>
                <h3>üéØ –¶–µ–ª—å –∏–≥—Ä—ã</h3>
                <p>‚Ä¢ –°–æ–±–∏—Ä–∞–π –º–µ–º—ã –¥–ª—è –æ—á–∫–æ–≤</p>
                <p>‚Ä¢ –ò–∑–±–µ–≥–∞–π —Ç—Ä–æ–ª–ª–µ–π</p>
                <p>‚Ä¢ –î–æ—Å—Ç–∏–≥–∞–π —Ñ–∏–Ω–∏—à–∞</p>
                <p>‚Ä¢ –ù–∞–π–¥–∏ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã!</p>
                ${isMobile ? '<p><strong>–ò–≥—Ä–∞–π—Ç–µ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ!</strong></p>' : ''}
                <br>
                <button id="backBtn">–ù–∞–∑–∞–¥</button>
            `;

            const backBtn = document.getElementById('backBtn');
            if (backBtn) {
                backBtn.addEventListener('click', () => {
                    location.reload();
                });
            }
        }
    }

    private startGameLoop(): void {
        const gameLoop = () => {
            this.game.update();
            this.game.render();
            requestAnimationFrame(gameLoop);
        };
        gameLoop();
    }
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
window.addEventListener('load', () => {
    new Main();
}); 